/**
 * Utilities for sharing analysis results and generating PDFs
 */
import { v4 as uuidv4 } from 'uuid';
import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';
import { saveToLocalStorage, getFromLocalStorage } from './storageUtils';

const STORAGE_KEYS = {
  SHARED_ANALYSES: 'sharedAnalyses'
};

/**
 * Generate a unique ID for sharing
 * @returns {string} Unique ID
 */
export const generateShareId = () => {
  return uuidv4().substring(0, 8); // Use first 8 characters of UUID for shorter URLs
};

/**
 * Save analysis for sharing
 * @param {Object} analysis - Analysis results to share
 * @returns {string} Share ID
 */
export const shareAnalysis = (analysis) => {
  // Generate a unique ID for this shared analysis
  const shareId = generateShareId();
  
  // Get existing shared analyses
  const sharedAnalyses = getFromLocalStorage(STORAGE_KEYS.SHARED_ANALYSES) || {};
  
  // Add this analysis to shared analyses with timestamp
  sharedAnalyses[shareId] = {
    ...analysis,
    sharedAt: new Date().toISOString()
  };
  
  // Save back to localStorage
  saveToLocalStorage(STORAGE_KEYS.SHARED_ANALYSES, sharedAnalyses);
  
  return shareId;
};

/**
 * Get a shared analysis by ID
 * @param {string} shareId - Share ID
 * @returns {Object|null} Shared analysis or null if not found
 */
export const getSharedAnalysis = (shareId) => {
  const sharedAnalyses = getFromLocalStorage(STORAGE_KEYS.SHARED_ANALYSES) || {};
  return sharedAnalyses[shareId] || null;
};

/**
 * Generate a shareable URL for an analysis
 * @param {string} shareId - Share ID
 * @returns {string} Shareable URL
 */
export const getShareableUrl = (shareId) => {
  const baseUrl = window.location.origin;
  return `${baseUrl}/report/${shareId}`;
};

/**
 * Export analysis results to PDF
 * @param {string} elementId - ID of element to export
 * @param {string} filename - Filename for PDF
 * @returns {Promise<void>}
 */
export const exportToPdf = async (elementId, filename = 'skill-analysis.pdf') => {
  const element = document.getElementById(elementId);
  
  if (!element) {
    throw new Error(`Element with ID "${elementId}" not found`);
  }
  
  try {
    // Add print-only elements for PDF export
    const printFooter = document.createElement('div');
    printFooter.id = 'print-footer';
    printFooter.innerHTML = `<p>Generated by SkillLens | ${new Date().toLocaleDateString()}</p>`;
    element.appendChild(printFooter);
    
    // Capture the element as canvas
    const canvas = await html2canvas(element, {
      scale: 2, // Higher scale for better quality
      useCORS: true,
      logging: false,
      allowTaint: true,
      backgroundColor: '#ffffff'
    });
    
    // Remove print-only elements
    element.removeChild(printFooter);
    
    // Create PDF
    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    });
    
    // Calculate dimensions to fit the canvas in A4
    const imgWidth = 210; // A4 width in mm
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    
    pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);
    pdf.save(filename);
    
    return true;
  } catch (error) {
    console.error('Error exporting to PDF:', error);
    throw error;
  }
};

export default {
  generateShareId,
  shareAnalysis,
  getSharedAnalysis,
  getShareableUrl,
  exportToPdf
};
